<snippet>
	<content><![CDATA[

'''Test cases for the $1.py module.'''

import unittest

import $1


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Uncomment to show lower level logging statements.
# import logging
# logger = logging.getLogger()
# logger.setLevel(logging.DEBUG)
# shandler = logging.StreamHandler()
# shandler.setLevel(logging.INFO)  # Pick one.
# <!-- # shandler.setLevel(logging.DEBUG)  # Pick one. -->
# formatter = logging.Formatter(
#     '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
#     )
# shandler.setFormatter(formatter)
# logger.addHandler(shandler)


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
class $2TestBaseClass(unittest.TestCase):
    '''Common base class for $2 testing.'''

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @classmethod
    def setUpClass(cls):
        '''Create test class level fixture.'''

        # If we're working from an even more general base class.
        # super($2TestBaseClass, cls).setUpClass()


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
class Test$2Class(unittest.TestCase):
    '''Test cases for $2 class level functionality.'''

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    def test_$1_class_methods(self):
        '''Test $2 class methods.'''

        thing = $1.$2()

        self.assertTrue(True)
        self.assertEqual(1, 1)


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
class Test$2Initialization(unittest.TestCase):
    '''Test cases for $2 initialization.'''

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    def test_$1_init(self):
        '''Test initialization of a $2 instance.'''

        thing = $1.$2()
        self.assertIsNotNone(thing)

        self.assertTrue(True)
        self.assertEqual(1, 1)


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
class Test$2Properties(unittest.TestCase):
    '''Test cases for $2 properties.'''

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @classmethod
    def setUpClass(self):
        '''Test class common fixture setup.'''
        pass

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @classmethod
    def tearDownClass(self):
        '''Test class common fixture teardown.'''
        pass

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    def setUp(self):
        '''Test case common fixture setup.'''
        pass

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    def test_$1_property(self):
        '''Test the $2.property property.'''

        thing = $1.$2()


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Define test suite.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pylint: disable=invalid-name
load_case = unittest.TestLoader().loadTestsFromTestCase
all_suites = {
    # Lowercase these.
    'suite_$2Class': load_case(
        Test$2Class
        ),
    'suite_$2Initialization': load_case(
        Test$2Initialization
        ),
    'suite_$2Properties': load_case(
        Test$2Properties
        ),
    }

master_suite = unittest.TestSuite(all_suites.values())
# pylint: enable=invalid-name

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if __name__ == '__main__':
    unittest.main()

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>pytest</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.python</scope>
</snippet>
